// Generated by gencpp from file abb_node/robot_SetTrackDistRequest.msg
// DO NOT EDIT!


#ifndef ABB_NODE_MESSAGE_ROBOT_SETTRACKDISTREQUEST_H
#define ABB_NODE_MESSAGE_ROBOT_SETTRACKDISTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace abb_node
{
template <class ContainerAllocator>
struct robot_SetTrackDistRequest_
{
  typedef robot_SetTrackDistRequest_<ContainerAllocator> Type;

  robot_SetTrackDistRequest_()
    : pos_dist(0.0)
    , ang_dist(0.0)  {
    }
  robot_SetTrackDistRequest_(const ContainerAllocator& _alloc)
    : pos_dist(0.0)
    , ang_dist(0.0)  {
  (void)_alloc;
    }



   typedef double _pos_dist_type;
  _pos_dist_type pos_dist;

   typedef double _ang_dist_type;
  _ang_dist_type ang_dist;





  typedef boost::shared_ptr< ::abb_node::robot_SetTrackDistRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abb_node::robot_SetTrackDistRequest_<ContainerAllocator> const> ConstPtr;

}; // struct robot_SetTrackDistRequest_

typedef ::abb_node::robot_SetTrackDistRequest_<std::allocator<void> > robot_SetTrackDistRequest;

typedef boost::shared_ptr< ::abb_node::robot_SetTrackDistRequest > robot_SetTrackDistRequestPtr;
typedef boost::shared_ptr< ::abb_node::robot_SetTrackDistRequest const> robot_SetTrackDistRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abb_node::robot_SetTrackDistRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abb_node::robot_SetTrackDistRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abb_node::robot_SetTrackDistRequest_<ContainerAllocator1> & lhs, const ::abb_node::robot_SetTrackDistRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pos_dist == rhs.pos_dist &&
    lhs.ang_dist == rhs.ang_dist;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abb_node::robot_SetTrackDistRequest_<ContainerAllocator1> & lhs, const ::abb_node::robot_SetTrackDistRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abb_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::abb_node::robot_SetTrackDistRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_node::robot_SetTrackDistRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_node::robot_SetTrackDistRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_node::robot_SetTrackDistRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_node::robot_SetTrackDistRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_node::robot_SetTrackDistRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abb_node::robot_SetTrackDistRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "83ebed908297f9c3e07ef540f9857ab1";
  }

  static const char* value(const ::abb_node::robot_SetTrackDistRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x83ebed908297f9c3ULL;
  static const uint64_t static_value2 = 0xe07ef540f9857ab1ULL;
};

template<class ContainerAllocator>
struct DataType< ::abb_node::robot_SetTrackDistRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb_node/robot_SetTrackDistRequest";
  }

  static const char* value(const ::abb_node::robot_SetTrackDistRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abb_node::robot_SetTrackDistRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Service to Set the tracking distance of the robot while in non-blocking mode\n"
"\n"
"float64 pos_dist  # mm\n"
"float64 ang_dist  # deg\n"
;
  }

  static const char* value(const ::abb_node::robot_SetTrackDistRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abb_node::robot_SetTrackDistRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos_dist);
      stream.next(m.ang_dist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_SetTrackDistRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abb_node::robot_SetTrackDistRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abb_node::robot_SetTrackDistRequest_<ContainerAllocator>& v)
  {
    s << indent << "pos_dist: ";
    Printer<double>::stream(s, indent + "  ", v.pos_dist);
    s << indent << "ang_dist: ";
    Printer<double>::stream(s, indent + "  ", v.ang_dist);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABB_NODE_MESSAGE_ROBOT_SETTRACKDISTREQUEST_H
