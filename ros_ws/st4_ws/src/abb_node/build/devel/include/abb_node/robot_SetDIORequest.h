// Generated by gencpp from file abb_node/robot_SetDIORequest.msg
// DO NOT EDIT!


#ifndef ABB_NODE_MESSAGE_ROBOT_SETDIOREQUEST_H
#define ABB_NODE_MESSAGE_ROBOT_SETDIOREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace abb_node
{
template <class ContainerAllocator>
struct robot_SetDIORequest_
{
  typedef robot_SetDIORequest_<ContainerAllocator> Type;

  robot_SetDIORequest_()
    : DIO_num(0)
    , state(false)  {
    }
  robot_SetDIORequest_(const ContainerAllocator& _alloc)
    : DIO_num(0)
    , state(false)  {
  (void)_alloc;
    }



   typedef int64_t _DIO_num_type;
  _DIO_num_type DIO_num;

   typedef uint8_t _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::abb_node::robot_SetDIORequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abb_node::robot_SetDIORequest_<ContainerAllocator> const> ConstPtr;

}; // struct robot_SetDIORequest_

typedef ::abb_node::robot_SetDIORequest_<std::allocator<void> > robot_SetDIORequest;

typedef boost::shared_ptr< ::abb_node::robot_SetDIORequest > robot_SetDIORequestPtr;
typedef boost::shared_ptr< ::abb_node::robot_SetDIORequest const> robot_SetDIORequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abb_node::robot_SetDIORequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abb_node::robot_SetDIORequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abb_node::robot_SetDIORequest_<ContainerAllocator1> & lhs, const ::abb_node::robot_SetDIORequest_<ContainerAllocator2> & rhs)
{
  return lhs.DIO_num == rhs.DIO_num &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abb_node::robot_SetDIORequest_<ContainerAllocator1> & lhs, const ::abb_node::robot_SetDIORequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abb_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::abb_node::robot_SetDIORequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_node::robot_SetDIORequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_node::robot_SetDIORequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_node::robot_SetDIORequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_node::robot_SetDIORequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_node::robot_SetDIORequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abb_node::robot_SetDIORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1fcb4d60ebcf186f13ef8f046ad3cace";
  }

  static const char* value(const ::abb_node::robot_SetDIORequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1fcb4d60ebcf186fULL;
  static const uint64_t static_value2 = 0x13ef8f046ad3caceULL;
};

template<class ContainerAllocator>
struct DataType< ::abb_node::robot_SetDIORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb_node/robot_SetDIORequest";
  }

  static const char* value(const ::abb_node::robot_SetDIORequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abb_node::robot_SetDIORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Service to set digital outputs on/off\n"
"int64 DIO_num  #digital IO number\n"
"bool state  #1-on; 0-off\n"
;
  }

  static const char* value(const ::abb_node::robot_SetDIORequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abb_node::robot_SetDIORequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.DIO_num);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_SetDIORequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abb_node::robot_SetDIORequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abb_node::robot_SetDIORequest_<ContainerAllocator>& v)
  {
    s << indent << "DIO_num: ";
    Printer<int64_t>::stream(s, indent + "  ", v.DIO_num);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABB_NODE_MESSAGE_ROBOT_SETDIOREQUEST_H
