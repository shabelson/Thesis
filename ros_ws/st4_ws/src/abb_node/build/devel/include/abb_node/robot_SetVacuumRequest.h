// Generated by gencpp from file abb_node/robot_SetVacuumRequest.msg
// DO NOT EDIT!


#ifndef ABB_NODE_MESSAGE_ROBOT_SETVACUUMREQUEST_H
#define ABB_NODE_MESSAGE_ROBOT_SETVACUUMREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace abb_node
{
template <class ContainerAllocator>
struct robot_SetVacuumRequest_
{
  typedef robot_SetVacuumRequest_<ContainerAllocator> Type;

  robot_SetVacuumRequest_()
    : vacuum(0)  {
    }
  robot_SetVacuumRequest_(const ContainerAllocator& _alloc)
    : vacuum(0)  {
  (void)_alloc;
    }



   typedef int64_t _vacuum_type;
  _vacuum_type vacuum;





  typedef boost::shared_ptr< ::abb_node::robot_SetVacuumRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abb_node::robot_SetVacuumRequest_<ContainerAllocator> const> ConstPtr;

}; // struct robot_SetVacuumRequest_

typedef ::abb_node::robot_SetVacuumRequest_<std::allocator<void> > robot_SetVacuumRequest;

typedef boost::shared_ptr< ::abb_node::robot_SetVacuumRequest > robot_SetVacuumRequestPtr;
typedef boost::shared_ptr< ::abb_node::robot_SetVacuumRequest const> robot_SetVacuumRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abb_node::robot_SetVacuumRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abb_node::robot_SetVacuumRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abb_node::robot_SetVacuumRequest_<ContainerAllocator1> & lhs, const ::abb_node::robot_SetVacuumRequest_<ContainerAllocator2> & rhs)
{
  return lhs.vacuum == rhs.vacuum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abb_node::robot_SetVacuumRequest_<ContainerAllocator1> & lhs, const ::abb_node::robot_SetVacuumRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abb_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::abb_node::robot_SetVacuumRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb_node::robot_SetVacuumRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_node::robot_SetVacuumRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb_node::robot_SetVacuumRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_node::robot_SetVacuumRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb_node::robot_SetVacuumRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abb_node::robot_SetVacuumRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ee7741d1da0c9620d77add3d4997c2d";
  }

  static const char* value(const ::abb_node::robot_SetVacuumRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ee7741d1da0c962ULL;
  static const uint64_t static_value2 = 0x0d77add3d4997c2dULL;
};

template<class ContainerAllocator>
struct DataType< ::abb_node::robot_SetVacuumRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb_node/robot_SetVacuumRequest";
  }

  static const char* value(const ::abb_node::robot_SetVacuumRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abb_node::robot_SetVacuumRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Service to set vacuum on/off\n"
"\n"
"int64 vacuum  #1-on; 0-off\n"
;
  }

  static const char* value(const ::abb_node::robot_SetVacuumRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abb_node::robot_SetVacuumRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vacuum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_SetVacuumRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abb_node::robot_SetVacuumRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abb_node::robot_SetVacuumRequest_<ContainerAllocator>& v)
  {
    s << indent << "vacuum: ";
    Printer<int64_t>::stream(s, indent + "  ", v.vacuum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABB_NODE_MESSAGE_ROBOT_SETVACUUMREQUEST_H
